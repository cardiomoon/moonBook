
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "predict3d"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('predict3d')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_lines")
> ### * add_lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_lines
> ### Title: Add lines with labels to pre-existing ggplot
> ### Aliases: add_lines
> 
> ### ** Examples
> 
> require(ggplot2)
Loading required package: ggplot2
> fit=lm(mpg~wt*hp,data=mtcars)
> df=calEquation(fit)
> p=ggplot(data=mtcars,aes(x=wt,y=mpg))
> add_lines(p,df)
> add_lines(p,df,lty=1:3,color=1:3,size=1)
> fit=lm(mpg~wt*vs,data=mtcars)
> df=calEquation(fit)
> p=ggplot(data=mtcars)+geom_point(aes(x=wt,y=mpg))
> add_lines(p,df)
> add_lines(p,df,lty=1:2,color=1:2,size=1)+theme_bw()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("beNumeric")
> ### * beNumeric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: beNumeric
> ### Title: Whether a string vector can be converted to numeric
> ### Aliases: beNumeric
> 
> ### ** Examples
> 
> x=c("age","22.5","11/2")
> beNumeric(x)
[1] FALSE  TRUE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("calEquation")
> ### * calEquation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calEquation
> ### Title: calculated slope and intercept from object of class lm
> ### Aliases: calEquation
> 
> ### ** Examples
> 
> fit=lm(mpg~wt*hp+carb,data=mtcars)
> calEquation(fit)
  intercept     slope     label
1  40.37009 -6.052960  hp=78.12
2  32.23549 -4.145189 hp=146.69
3  24.10090 -2.237417 hp=215.25
> calEquation(fit,pred="hp")
  intercept        slope   label
1  31.22106 -0.056349603 wt=2.24
2  23.17150 -0.029123886 wt=3.22
3  15.12193 -0.001898169  wt=4.2
> 
> 
> 
> cleanEx()
> nameEx("fit2newdata")
> ### * fit2newdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit2newdata
> ### Title: Make a new data set for prediction
> ### Aliases: fit2newdata
> 
> ### ** Examples
> 
> fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
> fit2newdata(fit,predictors=c("hp","wt","am"))
           hp       wt am cyl carb       mpg     se.fit     ymax        ymin
1    52.00000 2.238793  0   6    2 26.582958  3.8714127 30.45437  22.7115449
2    61.75862 2.238793  0   6    2 26.049145  3.6470967 29.69624  22.4020487
3    71.51724 2.238793  0   6    2 25.515333  3.4305346 28.94587  22.0847986
4    81.27586 2.238793  0   6    2 24.981521  3.2232896 28.20481  21.7582315
5    91.03448 2.238793  0   6    2 24.447709  3.0272758 27.47498  21.4204331
6   100.79310 2.238793  0   6    2 23.913897  2.8448156 26.75871  21.0690810
7   110.55172 2.238793  0   6    2 23.380084  2.6786803 26.05876  20.7014041
8   120.31034 2.238793  0   6    2 22.846272  2.5320852 25.37836  20.3141871
9   130.06897 2.238793  0   6    2 22.312460  2.4086007 24.72106  19.9038594
10  139.82759 2.238793  0   6    2 21.778648  2.3119330 24.09058  19.4667150
11  149.58621 2.238793  0   6    2 21.244836  2.2455479 23.49038  18.9992878
12  159.34483 2.238793  0   6    2 20.711024  2.2121735 22.92320  18.4988500
13  169.10345 2.238793  0   6    2 20.177211  2.2133036 22.39051  17.9639078
14  178.86207 2.238793  0   6    2 19.643399  2.2488861 21.89229  17.3945131
15  188.62069 2.238793  0   6    2 19.109587  2.3173345 21.42692  16.7922525
16  198.37931 2.238793  0   6    2 18.575775  2.4158569 20.99163  16.1599179
17  208.13793 2.238793  0   6    2 18.041963  2.5409574 20.58292  15.5010052
18  217.89655 2.238793  0   6    2 17.508150  2.6889291 20.19708  14.8192213
19  227.65517 2.238793  0   6    2 16.974338  2.8562194 19.83056  14.1181188
20  237.41379 2.238793  0   6    2 16.440526  3.0396404 19.48017  13.4008856
21  247.17241 2.238793  0   6    2 15.906714  3.2364507 19.14316  12.6702631
22  256.93103 2.238793  0   6    2 15.372902  3.4443559 18.81726  11.9285458
23  266.68966 2.238793  0   6    2 14.839089  3.6614664 18.50056  11.1776231
24  276.44828 2.238793  0   6    2 14.305277  3.8862398 18.19152  10.4190375
25  286.20690 2.238793  0   6    2 13.771465  4.1174213 17.88889   9.6540438
26  295.96552 2.238793  0   6    2 13.237653  4.3539903 17.59164   8.8836626
27  305.72414 2.238793  0   6    2 12.703841  4.5951148 17.29896   8.1087260
28  315.48276 2.238793  0   6    2 12.170029  4.8401139 17.01014   7.3299147
29  325.24138 2.238793  0   6    2 11.636216  5.0884281 16.72464   6.5477883
30  335.00000 2.238793  0   6    2 11.102404  5.3395948 16.44200   5.7628094
31   52.00000 3.217250  0   6    2 22.782533  1.9220338 24.70457  20.8604991
32   61.75862 3.217250  0   6    2 22.213952  1.6360253 23.84998  20.5779267
33   71.51724 3.217250  0   6    2 21.645371  1.3680602 23.01343  20.2773109
34   81.27586 3.217250  0   6    2 21.076790  1.1310365 22.20783  19.9457537
35   91.03448 3.217250  0   6    2 20.508209  0.9484426 21.45665  19.5597667
36  100.79310 3.217250  0   6    2 19.939628  0.8558553 20.79548  19.0837732
37  110.55172 3.217250  0   6    2 19.371048  0.8820873 20.25313  18.4889603
38  120.31034 3.217250  0   6    2 18.802467  1.0179945 19.82046  17.7844722
39  130.06897 3.217250  0   6    2 18.233886  1.2276776 19.46156  17.0062081
40  139.82759 3.217250  0   6    2 17.665305  1.4801071 19.14541  16.1851978
41  149.58621 3.217250  0   6    2 17.096724  1.7569538 18.85368  15.3397702
42  159.34483 3.217250  0   6    2 16.528143  2.0483411 18.57648  14.4798020
43  169.10345 3.217250  0   6    2 15.959562  2.3488637 18.30843  13.6106985
44  178.86207 3.217250  0   6    2 15.390981  2.6554219 18.04640  12.7355595
45  188.62069 3.217250  0   6    2 14.822400  2.9661448 17.78855  11.8562557
46  198.37931 3.217250  0   6    2 14.253820  3.2798490 17.53367  10.9739706
47  208.13793 3.217250  0   6    2 13.685239  3.5957542 17.28099  10.0894845
48  217.89655 3.217250  0   6    2 13.116658  3.9133276 17.02999   9.2033302
49  227.65517 3.217250  0   6    2 12.548077  4.2321936 16.78027   8.3158834
50  237.41379 3.217250  0   6    2 11.979496  4.5520805 16.53158   7.4274156
51  247.17241 3.217250  0   6    2 11.410915  4.8727873 16.28370   6.5381279
52  256.93103 3.217250  0   6    2 10.842334  5.1941621 16.03650   5.6481722
53  266.68966 3.217250  0   6    2 10.273753  5.5160882 15.78984   4.7576652
54  276.44828 3.217250  0   6    2  9.705173  5.8384744 15.54365   3.8666981
55  286.20690 3.217250  0   6    2  9.136592  6.1612485 15.29784   2.9753432
56  295.96552 3.217250  0   6    2  8.568011  6.4843524 15.05236   2.0836583
57  305.72414 3.217250  0   6    2  7.999430  6.8077394 14.80717   1.1916904
58  315.48276 3.217250  0   6    2  7.430849  7.1313708 14.56222   0.2994781
59  325.24138 3.217250  0   6    2  6.862268  7.4552149 14.31748  -0.5929468
60  335.00000 3.217250  0   6    2  6.293687  7.7792450 14.07293  -1.4855578
61   52.00000 4.195707  0   6    2 18.982108  3.8083651 22.79047  15.1737430
62   61.75862 4.195707  0   6    2 18.378759  3.3551081 21.73387  15.0236504
63   71.51724 4.195707  0   6    2 17.775409  2.9380853 20.71349  14.8373237
64   81.27586 4.195707  0   6    2 17.172059  2.5749617 19.74702  14.5970977
65   91.03448 4.195707  0   6    2 16.568710  2.2915058 18.86022  14.2772040
66  100.79310 4.195707  0   6    2 15.965360  2.1199193 18.08528  13.8454409
67  110.55172 4.195707  0   6    2 15.362011  2.0879669 17.44998  13.2740438
68  120.31034 4.195707  0   6    2 14.758661  2.2017361 16.96040  12.5569250
69  130.06897 4.195707  0   6    2 14.155311  2.4409355 16.59625  11.7143760
70  139.82759 4.195707  0   6    2 13.551962  2.7732974 16.32526  10.7786644
71  149.58621 4.195707  0   6    2 12.948612  3.1696498 16.11826   9.7789625
72  159.34483 4.195707  0   6    2 12.345263  3.6089706 15.95423   8.7362921
73  169.10345 4.195707  0   6    2 11.741913  4.0773946 15.81931   7.6645185
74  178.86207 4.195707  0   6    2 11.138564  4.5659734 15.70454   6.5725902
75  188.62069 4.195707  0   6    2 10.535214  5.0688822 15.60410   5.4663317
76  198.37931 4.195707  0   6    2  9.931864  5.5822495 15.51411   4.3496148
77  208.13793 4.195707  0   6    2  9.328515  6.1034368 15.43195   3.2250780
78  217.89655 4.195707  0   6    2  8.725165  6.6306003 15.35577   2.0945649
79  227.65517 4.195707  0   6    2  8.121816  7.1624205 15.28424   0.9593951
80  237.41379 4.195707  0   6    2  7.518466  7.6979325 15.21640  -0.1794664
81  247.17241 4.195707  0   6    2  6.915116  8.2364160 15.15153  -1.3212995
82  256.93103 4.195707  0   6    2  6.311767  8.7773243 15.08909  -2.4655574
83  266.68966 4.195707  0   6    2  5.708417  9.3202351 15.02865  -3.6118178
84  276.44828 4.195707  0   6    2  5.105068  9.8648179 14.96989  -4.7597502
85  286.20690 4.195707  0   6    2  4.501718 10.4108102 14.91253  -5.9090921
86  295.96552 4.195707  0   6    2  3.898369 10.9580014 14.85637  -7.0596329
87  305.72414 4.195707  0   6    2  3.295019 11.5062205 14.80124  -8.2112015
88  315.48276 4.195707  0   6    2  2.691669 12.0553272 14.74700  -9.3636578
89  325.24138 4.195707  0   6    2  2.088320 12.6052054 14.69353 -10.5168856
90  335.00000 4.195707  0   6    2  1.484970 13.1557586 14.64073 -11.6707884
91   52.00000 2.238793  1   6    2 27.025527  3.5761658 30.60169  23.4493616
92   61.75862 2.238793  1   6    2 26.491715  3.3433443 29.83506  23.1483708
93   71.51724 2.238793  1   6    2 25.957903  3.1178062 29.07571  22.8400967
94   81.27586 2.238793  1   6    2 25.424091  2.9012506 28.32534  22.5228402
95   91.03448 2.238793  1   6    2 24.890279  2.6958429 27.58612  22.1944356
96  100.79310 2.238793  1   6    2 24.356466  2.5043278 26.86079  21.8521385
97  110.55172 2.238793  1   6    2 23.822654  2.3301334 26.15279  21.4925208
98  120.31034 2.238793  1   6    2 23.288842  2.1774205 25.46626  21.1114215
99  130.06897 2.238793  1   6    2 22.755030  2.0509932 24.80602  20.7040366
100 139.82759 2.238793  1   6    2 22.221218  1.9559553 24.17717  20.2652623
101 149.58621 2.238793  1   6    2 21.687405  1.8970303 23.58444  19.7903751
102 159.34483 2.238793  1   6    2 21.153593  1.8776213 23.03121  19.2759720
103 169.10345 2.238793  1   6    2 20.619781  1.8989402 22.51872  18.7208408
104 178.86207 2.238793  1   6    2 20.085969  1.9596584 22.04563  18.1263104
105 188.62069 2.238793  1   6    2 19.552157  2.0562887 21.60845  17.4958680
106 198.37931 2.238793  1   6    2 19.018345  2.1840696 21.20241  16.8342749
107 208.13793 2.238793  1   6    2 18.484532  2.3378989 20.82243  16.1466334
108 217.89655 2.238793  1   6    2 17.950720  2.5129977 20.46372  15.4377224
109 227.65517 2.238793  1   6    2 17.416908  2.7052391 20.12215  14.7116688
110 237.41379 2.238793  1   6    2 16.883096  2.9112291 19.79432  13.9718667
111 247.17241 2.238793  1   6    2 16.349284  3.1282527 19.47754  13.2210308
112 256.93103 2.238793  1   6    2 15.815471  3.3541692 19.16964  12.4613022
113 266.68966 2.238793  1   6    2 15.281659  3.5872986 18.86896  11.6943606
114 276.44828 2.238793  1   6    2 14.747847  3.8263228 18.57417  10.9215242
115 286.20690 2.238793  1   6    2 14.214035  4.0702034 18.28424  10.1438314
116 295.96552 2.238793  1   6    2 13.680223  4.3181177 17.99834   9.3621050
117 305.72414 2.238793  1   6    2 13.146410  4.5694091 17.71582   8.5770013
118 315.48276 2.238793  1   6    2 12.612598  4.8235499 17.43615   7.7890483
119 325.24138 2.238793  1   6    2 12.078786  5.0801125 17.15890   6.9986736
120 335.00000 2.238793  1   6    2 11.544974  5.3387477 16.88372   6.2062262
121  52.00000 3.217250  1   6    2 23.225103  2.4137410 25.63884  20.8113616
122  61.75862 3.217250  1   6    2 22.656522  2.1739486 24.83047  20.4825731
123  71.51724 3.217250  1   6    2 22.087941  1.9592357 24.04718  20.1287051
124  81.27586 3.217250  1   6    2 21.519360  1.7787077 23.29807  19.7406522
125  91.03448 3.217250  1   6    2 20.950779  1.6436675 22.59445  19.3071115
126 100.79310 3.217250  1   6    2 20.382198  1.5659278 21.94813  18.8162704
127 110.55172 3.217250  1   6    2 19.813617  1.5541112 21.36773  18.2595061
128 120.31034 3.217250  1   6    2 19.245036  1.6096702 20.85471  17.6353662
129 130.06897 3.217250  1   6    2 18.676455  1.7261112 20.40257  16.9503443
130 139.82759 3.217250  1   6    2 18.107875  1.8922279 20.00010  16.2156467
131 149.58621 3.217250  1   6    2 17.539294  2.0962438 19.63554  15.4430499
132 159.34483 3.217250  1   6    2 16.970713  2.3282171 19.29893  14.6424958
133 169.10345 3.217250  1   6    2 16.402132  2.5806193 18.98275  13.8215126
134 178.86207 3.217250  1   6    2 15.833551  2.8480243 18.68158  12.9855267
135 188.62069 3.217250  1   6    2 15.264970  3.1265851 18.39156  12.1383851
136 198.37931 3.217250  1   6    2 14.696389  3.4135715 18.10996  11.2828178
137 208.13793 3.217250  1   6    2 14.127808  3.7070274 17.83484  10.4207810
138 217.89655 3.217250  1   6    2 13.559228  4.0055310 17.56476   9.5536966
139 227.65517 3.217250  1   6    2 12.990647  4.3080331 17.29868   8.6826135
140 237.41379 3.217250  1   6    2 12.422066  4.6137475 17.03581   7.8083183
141 247.17241 3.217250  1   6    2 11.853485  4.9220755 16.77556   6.9314094
142 256.93103 3.217250  1   6    2 11.284904  5.2325551 16.51746   6.0523488
143 266.68966 3.217250  1   6    2 10.716323  5.5448250 16.26115   5.1714981
144 276.44828 3.217250  1   6    2 10.147742  5.8585989 16.00634   4.2891433
145 286.20690 3.217250  1   6    2  9.579161  6.1736474 15.75281   3.4055140
146 295.96552 3.217250  1   6    2  9.010580  6.4897849 15.50037   2.5207956
147 305.72414 3.217250  1   6    2  8.442000  6.8068597 15.24886   1.6351399
148 315.48276 3.217250  1   6    2  7.873419  7.1247467 14.99817   0.7486720
149 325.24138 3.217250  1   6    2  7.304838  7.4433417 14.74818  -0.1385039
150 335.00000 3.217250  1   6    2  6.736257  7.7625577 14.49881  -1.0263008
151  52.00000 4.195707  1   6    2 19.424678  4.5789063 24.00358  14.8457716
152  61.75862 4.195707  1   6    2 18.821328  4.1807967 23.00212  14.6405315
153  71.51724 4.195707  1   6    2 18.217979  3.8228560 22.04083  14.3951226
154  81.27586 4.195707  1   6    2 17.614629  3.5173688 21.13200  14.0972602
155  91.03448 4.195707  1   6    2 17.011280  3.2790284 20.29031  13.7322511
156 100.79310 4.195707  1   6    2 16.407930  3.1232450 19.53117  13.2846849
157 110.55172 4.195707  1   6    2 15.804580  3.0626426 18.86722  12.7419378
158 120.31034 4.195707  1   6    2 15.201231  3.1028033 18.30403  12.0984275
159 130.06897 4.195707  1   6    2 14.597881  3.2399823 17.83786  11.3578989
160 139.82759 4.195707  1   6    2 13.994532  3.4626681 17.45720  10.5318635
161 149.58621 4.195707  1   6    2 13.391182  3.7556816 17.14686   9.6355004
162 159.34483 4.195707  1   6    2 12.787832  4.1039866 16.89182   8.6838458
163 169.10345 4.195707  1   6    2 12.184483  4.4947476 16.67923   7.6897352
164 178.86207 4.195707  1   6    2 11.581133  4.9178547 16.49899   6.6632785
165 188.62069 4.195707  1   6    2 10.977784  5.3656614 16.34345   5.6121223
166 198.37931 4.195707  1   6    2 10.374434  5.8324812 16.20692   4.5419528
167 208.13793 4.195707  1   6    2  9.771084  6.3140986 16.08518   3.4569859
168 217.89655 4.195707  1   6    2  9.167735  6.8073734 15.97511   2.3603615
169 227.65517 4.195707  1   6    2  8.564385  7.3099462 15.87433   1.2544391
170 237.41379 4.195707  1   6    2  7.961036  7.8200244 15.78106   0.1410113
171 247.17241 4.195707  1   6    2  7.357686  8.3362305 15.69392  -0.9785443
172 256.93103 4.195707  1   6    2  6.754337  8.8574931 15.61183  -2.1031565
173 266.68966 4.195707  1   6    2  6.150987  9.3829696 15.53396  -3.2319826
174 276.44828 4.195707  1   6    2  5.547637  9.9119897 15.45963  -4.3643523
175 286.20690 4.195707  1   6    2  4.944288 10.4440151 15.38830  -5.4997272
176 295.96552 4.195707  1   6    2  4.340938 10.9786087 15.31955  -6.6376705
177 305.72414 4.195707  1   6    2  3.737589 11.5154130 15.25300  -7.7778243
178 315.48276 4.195707  1   6    2  3.134239 12.0541326 15.18837  -8.9198935
179 325.24138 4.195707  1   6    2  2.530889 12.5945216 15.12541 -10.0636322
180 335.00000 4.195707  1   6    2  1.927540 13.1363742 15.06391 -11.2088343
> fit2newdata(fit,predictors=c("hp","wt","cyl"))
           hp       wt cyl carb am        mpg     se.fit     ymax         ymin
1    52.00000 2.238793   4    2  0 29.0765904  1.8354859 30.91208  27.24110449
2    61.75862 2.238793   4    2  0 28.3276841  1.6689175 29.99660  26.65876660
3    71.51724 2.238793   4    2  0 27.5787779  1.5524818 29.13126  26.02629607
4    81.27586 2.238793   4    2  0 26.8298716  1.4979154 28.32779  25.33195620
5    91.03448 2.238793   4    2  0 26.0809654  1.5119320 27.59290  24.56903342
6   100.79310 2.238793   4    2  0 25.3320591  1.5927218 26.92478  23.73933736
7   110.55172 2.238793   4    2  0 24.5831529  1.7309604 26.31411  22.85219250
8   120.31034 2.238793   4    2  0 23.8342466  1.9142418 25.74849  21.92000480
9   130.06897 2.238793   4    2  0 23.0853404  2.1309755 25.21632  20.95436489
10  139.82759 2.238793   4    2  0 22.3364341  2.3720093 24.70844  19.96442483
11  149.58621 2.238793   4    2  0 21.5875279  2.6306722 24.21820  18.95685564
12  159.34483 2.238793   4    2  0 20.8386216  2.9022545 23.74088  17.93636707
13  169.10345 2.238793   4    2  0 20.0897153  3.1834515 23.27317  16.90626388
14  178.86207 2.238793   4    2  0 19.3408091  3.4719277 22.81274  15.86888140
15  188.62069 2.238793   4    2  0 18.5919028  3.7660108 22.35791  14.82589204
16  198.37931 2.238793   4    2  0 17.8429966  4.0644839 21.90748  13.77851266
17  208.13793 2.238793   4    2  0 17.0940903  4.3664469 21.46054  12.72764343
18  217.89655 2.238793   4    2  0 16.3451841  4.6712230 21.01641  11.67396107
19  227.65517 2.238793   4    2  0 15.5962778  4.9782956 20.57457  10.61798224
20  237.41379 2.238793   4    2  0 14.8473716  5.2872645 20.13464   9.56010703
21  247.17241 2.238793   4    2  0 14.0984653  5.5978159 19.69628   8.50064946
22  256.93103 2.238793   4    2  0 13.3495591  5.9097001 19.25926   7.43985896
23  266.68966 2.238793   4    2  0 12.6006528  6.2227169 18.82337   6.37793596
24  276.44828 2.238793   4    2  0 11.8517466  6.5367034 18.38845   5.31504314
25  286.20690 2.238793   4    2  0 11.1028403  6.8515265 17.95437   4.25131385
26  295.96552 2.238793   4    2  0 10.3539340  7.1670758 17.52101   3.18685830
27  305.72414 2.238793   4    2  0  9.6050278  7.4832594 17.08829   2.12176837
28  315.48276 2.238793   4    2  0  8.8561215  7.8000003 16.65612   1.05612120
29  325.24138 2.238793   4    2  0  8.1072153  8.1172333 16.22445  -0.01001797
30  335.00000 2.238793   4    2  0  7.3583090  8.4349027 15.79321  -1.07659363
31   52.00000 3.217250   4    2  0 25.0990811  2.5730045 27.67209  22.52607653
32   61.75862 3.217250   4    2  0 24.1938466  2.1010458 26.29489  22.09280082
33   71.51724 3.217250   4    2  0 23.2886121  1.6832537 24.97187  21.60535838
34   81.27586 3.217250   4    2  0 22.3833777  1.3701101 23.75349  21.01326754
35   91.03448 3.217250   4    2  0 21.4781432  1.2433701 22.72151  20.23477314
36  100.79310 3.217250   4    2  0 20.5729087  1.3563352 21.92924  19.21657353
37  110.55172 3.217250   4    2  0 19.6676743  1.6607920 21.32847  18.00688228
38  120.31034 3.217250   4    2  0 18.7624398  2.0740597 20.83650  16.68838010
39  130.06897 3.217250   4    2  0 17.8572053  2.5436442 20.40085  15.31356110
40  139.82759 3.217250   4    2  0 16.9519709  3.0435895 19.99556  13.90838136
41  149.58621 3.217250   4    2  0 16.0467364  3.5611314 19.60787  12.48560499
42  159.34483 3.217250   4    2  0 15.1415019  4.0895948 19.23110  11.05190714
43  169.10345 3.217250   4    2  0 14.2362675  4.6252376 18.86151   9.61102986
44  178.86207 3.217250   4    2  0 13.3310330  5.1658271 18.49686   8.16520596
45  188.62069 3.217250   4    2  0 12.4257985  5.7099583 18.13576   6.71584022
46  198.37931 3.217250   4    2  0 11.5205641  6.2567074 17.77727   5.26385667
47  208.13793 3.217250   4    2  0 10.6153296  6.8054434 17.42077   3.80988620
48  217.89655 3.217250   4    2  0  9.7100952  7.3557217 17.06582   2.35437348
49  227.65517 3.217250   4    2  0  8.8048607  7.9072202 16.71208   0.89764049
50  237.41379 3.217250   4    2  0  7.8996262  8.4597003 16.35933  -0.56007412
51  247.17241 3.217250   4    2  0  6.9943918  9.0129816 16.00737  -2.01858984
52  256.93103 3.217250   4    2  0  6.0891573  9.5669250 15.65608  -3.47776768
53  266.68966 3.217250   4    2  0  5.1839228 10.1214218 15.30534  -4.93749893
54  276.44828 3.217250   4    2  0  4.2786884 10.6763857 14.95507  -6.39769736
55  286.20690 3.217250   4    2  0  3.3734539 11.2317476 14.60520  -7.85829372
56  295.96552 3.217250   4    2  0  2.4682194 11.7874512 14.25567  -9.31923177
57  305.72414 3.217250   4    2  0  1.5629850 12.3434503 13.90644 -10.78046535
58  315.48276 3.217250   4    2  0  0.6577505 12.8997068 13.55746 -12.24195626
59  325.24138 3.217250   4    2  0 -0.2474840 13.4561886 13.20870 -13.70367257
60  335.00000 3.217250   4    2  0 -1.1527184 14.0128690 12.86015 -15.16558745
61   52.00000 4.195707   4    2  0 21.1215717  4.5316408 25.65321  16.58993096
62   61.75862 4.195707   4    2  0 20.0600090  3.7477956 23.80780  16.31221344
63   71.51724 4.195707   4    2  0 18.9984464  3.0696872 22.06813  15.92875915
64   81.27586 4.195707   4    2  0 17.9368837  2.5820130 20.51890  15.35487069
65   91.03448 4.195707   4    2  0 16.8753210  2.4036236 19.27894  14.47169739
66  100.79310 4.195707   4    2  0 15.8137583  2.5990047 18.41276  13.21475359
67  110.55172 4.195707   4    2  0 14.7521957  3.0982332 17.85043  11.65396250
68  120.31034 4.195707   4    2  0 13.6906330  3.7828660 17.47350   9.90776694
69  130.06897 4.195707   4    2  0 12.6290703  4.5703289 17.19940   8.05874142
70  139.82759 4.195707   4    2  0 11.5675076  5.4159524 16.98346   6.15155521
71  149.58621 4.195707   4    2  0 10.5059450  6.2963465 16.80229   4.20959848
72  159.34483 4.195707   4    2  0  9.4443823  7.1987652 16.64315   2.24561704
73  169.10345 4.195707   4    2  0  8.3828196  8.1158651 16.49868   0.26695446
74  178.86207 4.195707   4    2  0  7.3212569  9.0431807 16.36444  -1.72192375
75  188.62069 4.195707   4    2  0  6.2596943  9.9778640 16.23756  -3.71816976
76  198.37931 4.195707   4    2  0  5.1981316 10.9180231 16.11615  -5.71989149
77  208.13793 4.195707   4    2  0  4.1365689 11.8623560 15.99892  -7.72578706
78  217.89655 4.195707   4    2  0  3.0750062 12.8099397 15.88495  -9.73493343
79  227.65517 4.195707   4    2  0  2.0134436 13.7601026 15.77355 -11.74665902
80  237.41379 4.195707   4    2  0  0.9518809 14.7123450 15.66423 -13.76046413
81  247.17241 4.195707   4    2  0 -0.1096818 15.6662878 15.55661 -15.77596955
82  256.93103 4.195707   4    2  0 -1.1712445 16.6216381 15.45039 -17.79288255
83  266.68966 4.195707   4    2  0 -2.2328071 17.5781665 15.34536 -19.81097362
84  276.44828 4.195707   4    2  0 -3.2943698 18.5356906 15.24132 -21.83006038
85  286.20690 4.195707   4    2  0 -4.3559325 19.4940636 15.13813 -23.84999611
86  295.96552 4.195707   4    2  0 -5.4174952 20.4531663 15.03567 -25.87066148
87  305.72414 4.195707   4    2  0 -6.4790579 21.4129006 14.93384 -27.89195843
88  315.48276 4.195707   4    2  0 -7.5406205 22.3731852 14.83256 -29.91380569
89  325.24138 4.195707   4    2  0 -8.6021832 23.3339521 14.73177 -31.93613532
90  335.00000 4.195707   4    2  0 -9.6637459 24.2951442 14.63140 -33.95889009
91   52.00000 2.238793   6    2  0 26.5829576  3.8714127 30.45437  22.71154491
92   61.75862 2.238793   6    2  0 26.0491454  3.6470967 29.69624  22.40204867
93   71.51724 2.238793   6    2  0 25.5153332  3.4305346 28.94587  22.08479860
94   81.27586 2.238793   6    2  0 24.9815210  3.2232896 28.20481  21.75823145
95   91.03448 2.238793   6    2  0 24.4477089  3.0272758 27.47498  21.42043310
96  100.79310 2.238793   6    2  0 23.9138967  2.8448156 26.75871  21.06908102
97  110.55172 2.238793   6    2  0 23.3800845  2.6786803 26.05876  20.70140414
98  120.31034 2.238793   6    2  0 22.8462723  2.5320852 25.37836  20.31418709
99  130.06897 2.238793   6    2  0 22.3124601  2.4086007 24.72106  19.90385940
100 139.82759 2.238793   6    2  0 21.7786479  2.3119330 24.09058  19.46671496
101 149.58621 2.238793   6    2  0 21.2448357  2.2455479 23.49038  18.99928781
102 159.34483 2.238793   6    2  0 20.7110235  2.2121735 22.92320  18.49885002
103 169.10345 2.238793   6    2  0 20.1772114  2.2133036 22.39051  17.96390778
104 178.86207 2.238793   6    2  0 19.6433992  2.2488861 21.89229  17.39451310
105 188.62069 2.238793   6    2  0 19.1095870  2.3173345 21.42692  16.79225249
106 198.37931 2.238793   6    2  0 18.5757748  2.4158569 20.99163  16.15991790
107 208.13793 2.238793   6    2  0 18.0419626  2.5409574 20.58292  15.50100517
108 217.89655 2.238793   6    2  0 17.5081504  2.6889291 20.19708  14.81922133
109 227.65517 2.238793   6    2  0 16.9743382  2.8562194 19.83056  14.11811881
110 237.41379 2.238793   6    2  0 16.4405260  3.0396404 19.48017  13.40088562
111 247.17241 2.238793   6    2  0 15.9067139  3.2364507 19.14316  12.67026315
112 256.93103 2.238793   6    2  0 15.3729017  3.4443559 18.81726  11.92854581
113 266.68966 2.238793   6    2  0 14.8390895  3.6614664 18.50056  11.17762308
114 276.44828 2.238793   6    2  0 14.3052773  3.8862398 18.19152  10.41903749
115 286.20690 2.238793   6    2  0 13.7714651  4.1174213 17.88889   9.65404379
116 295.96552 2.238793   6    2  0 13.2376529  4.3539903 17.59164   8.88366262
117 305.72414 2.238793   6    2  0 12.7038407  4.5951148 17.29896   8.10872598
118 315.48276 2.238793   6    2  0 12.1700286  4.8401139 17.01014   7.32991467
119 325.24138 2.238793   6    2  0 11.6362164  5.0884281 16.72464   6.54778831
120 335.00000 2.238793   6    2  0 11.1024042  5.3395948 16.44200   5.76280940
121  52.00000 3.217250   6    2  0 22.7825329  1.9220338 24.70457  20.86049907
122  61.75862 3.217250   6    2  0 22.2139520  1.6360253 23.84998  20.57792666
123  71.51724 3.217250   6    2  0 21.6453711  1.3680602 23.01343  20.27731088
124  81.27586 3.217250   6    2  0 21.0767902  1.1310365 22.20783  19.94575369
125  91.03448 3.217250   6    2  0 20.5082093  0.9484426 21.45665  19.55976669
126 100.79310 3.217250   6    2  0 19.9396284  0.8558553 20.79548  19.08377318
127 110.55172 3.217250   6    2  0 19.3710476  0.8820873 20.25313  18.48896027
128 120.31034 3.217250   6    2  0 18.8024667  1.0179945 19.82046  17.78447222
129 130.06897 3.217250   6    2  0 18.2338858  1.2276776 19.46156  17.00620815
130 139.82759 3.217250   6    2  0 17.6653049  1.4801071 19.14541  16.18519780
131 149.58621 3.217250   6    2  0 17.0967240  1.7569538 18.85368  15.33977022
132 159.34483 3.217250   6    2  0 16.5281431  2.0483411 18.57648  14.47980204
133 169.10345 3.217250   6    2  0 15.9595622  2.3488637 18.30843  13.61069852
134 178.86207 3.217250   6    2  0 15.3909814  2.6554219 18.04640  12.73555949
135 188.62069 3.217250   6    2  0 14.8224005  2.9661448 17.78855  11.85625571
136 198.37931 3.217250   6    2  0 14.2538196  3.2798490 17.53367  10.97397063
137 208.13793 3.217250   6    2  0 13.6852387  3.5957542 17.28099  10.08948446
138 217.89655 3.217250   6    2  0 13.1166578  3.9133276 17.02999   9.20333021
139 227.65517 3.217250   6    2  0 12.5480769  4.2321936 16.78027   8.31588337
140 237.41379 3.217250   6    2  0 11.9794960  4.5520805 16.53158   7.42741558
141 247.17241 3.217250   6    2  0 11.4109152  4.8727873 16.28370   6.53812788
142 256.93103 3.217250   6    2  0 10.8423343  5.1941621 16.03650   5.64817216
143 266.68966 3.217250   6    2  0 10.2737534  5.5160882 15.78984   4.75766517
144 276.44828 3.217250   6    2  0  9.7051725  5.8384744 15.54365   3.86669809
145 286.20690 3.217250   6    2  0  9.1365916  6.1612485 15.29784   2.97534316
146 295.96552 3.217250   6    2  0  8.5680107  6.4843524 15.05236   2.08365829
147 305.72414 3.217250   6    2  0  7.9994298  6.8077394 14.80717   1.19169045
148 315.48276 3.217250   6    2  0  7.4308490  7.1313708 14.56222   0.29947815
149 325.24138 3.217250   6    2  0  6.8622681  7.4552149 14.31748  -0.59294679
150 335.00000 3.217250   6    2  0  6.2936872  7.7792450 14.07293  -1.48555780
151  52.00000 4.195707   6    2  0 18.9821081  3.8083651 22.79047  15.17374305
152  61.75862 4.195707   6    2  0 18.3787586  3.3551081 21.73387  15.02365041
153  71.51724 4.195707   6    2  0 17.7754090  2.9380853 20.71349  14.83732371
154  81.27586 4.195707   6    2  0 17.1720594  2.5749617 19.74702  14.59709771
155  91.03448 4.195707   6    2  0 16.5687098  2.2915058 18.86022  14.27720404
156 100.79310 4.195707   6    2  0 15.9653602  2.1199193 18.08528  13.84544088
157 110.55172 4.195707   6    2  0 15.3620106  2.0879669 17.44998  13.27404376
158 120.31034 4.195707   6    2  0 14.7586610  2.2017361 16.96040  12.55692499
159 130.06897 4.195707   6    2  0 14.1553115  2.4409355 16.59625  11.71437598
160 139.82759 4.195707   6    2  0 13.5519619  2.7732974 16.32526  10.77866443
161 149.58621 4.195707   6    2  0 12.9486123  3.1696498 16.11826   9.77896251
162 159.34483 4.195707   6    2  0 12.3452627  3.6089706 15.95423   8.73629207
163 169.10345 4.195707   6    2  0 11.7419131  4.0773946 15.81931   7.66451852
164 178.86207 4.195707   6    2  0 11.1385635  4.5659734 15.70454   6.57259017
165 188.62069 4.195707   6    2  0 10.5352140  5.0688822 15.60410   5.46633171
166 198.37931 4.195707   6    2  0  9.9318644  5.5822495 15.51411   4.34961484
167 208.13793 4.195707   6    2  0  9.3285148  6.1034368 15.43195   3.22507797
168 217.89655 4.195707   6    2  0  8.7251652  6.6306003 15.35577   2.09456491
169 227.65517 4.195707   6    2  0  8.1218156  7.1624205 15.28424   0.95939508
170 237.41379 4.195707   6    2  0  7.5184660  7.6979325 15.21640  -0.17946642
171 247.17241 4.195707   6    2  0  6.9151165  8.2364160 15.15153  -1.32129955
172 256.93103 4.195707   6    2  0  6.3117669  8.7773243 15.08909  -2.46555739
173 266.68966 4.195707   6    2  0  5.7084173  9.3202351 15.02865  -3.61181781
174 276.44828 4.195707   6    2  0  5.1050677  9.8648179 14.96989  -4.75975017
175 286.20690 4.195707   6    2  0  4.5017181 10.4108102 14.91253  -5.90909210
176 295.96552 4.195707   6    2  0  3.8983685 10.9580014 14.85637  -7.05963291
177 305.72414 4.195707   6    2  0  3.2950190 11.5062205 14.80124  -8.21120154
178 315.48276 4.195707   6    2  0  2.6916694 12.0553272 14.74700  -9.36365779
179 325.24138 4.195707   6    2  0  2.0883198 12.6052054 14.69353 -10.51688564
180 335.00000 4.195707   6    2  0  1.4849702 13.1557586 14.64073 -11.67078836
181  52.00000 2.238793   8    2  0 24.0893248  7.2838183 31.37314  16.80550649
182  61.75862 2.238793   8    2  0 23.7706067  6.8819272 30.65253  16.88867950
183  71.51724 2.238793   8    2  0 23.4518886  6.4819825 29.93387  16.96990603
184  81.27586 2.238793   8    2  0 23.1331705  6.0843682 29.21754  17.04880221
185  91.03448 2.238793   8    2  0 22.8144523  5.6895729 28.50403  17.12487947
186 100.79310 2.238793   8    2  0 22.4957342  5.2982266 27.79396  17.19750761
187 110.55172 2.238793   8    2  0 22.1770161  4.9111541 27.08817  17.26586202
188 120.31034 2.238793   8    2  0 21.8582980  4.5294510 26.38775  17.32884693
189 130.06897 2.238793   8    2  0 21.5395799  4.1545977 25.69418  17.38498210
190 139.82759 2.238793   8    2  0 21.2208617  3.7886279 25.00949  17.43223381
191 149.58621 2.238793   8    2  0 20.9021436  3.4343826 24.33653  17.46776100
192 159.34483 2.238793   8    2  0 20.5834255  3.0958892 23.67931  17.48753634
193 169.10345 2.238793   8    2  0 20.2647074  2.7789096 23.04362  17.48579775
194 178.86207 2.238793   8    2  0 19.9459892  2.4916683 22.43766  17.45432093
195 188.62069 2.238793   8    2  0 19.6272711  2.2456061 21.87288  17.38166504
196 198.37931 2.238793   8    2  0 19.3085530  2.0555646 21.36412  17.25298844
197 208.13793 2.238793   8    2  0 18.9898349  1.9380939 20.92793  17.05174097
198 217.89655 2.238793   8    2  0 18.6711168  1.9066551 20.57777  16.76446167
199 227.65517 2.238793   8    2  0 18.3523986  1.9653810 20.31778  16.38701761
200 237.41379 2.238793   8    2  0 18.0336805  2.1067451 20.14043  15.92693544
201 247.17241 2.238793   8    2  0 17.7149624  2.3156620 20.03062  15.39930041
202 256.93103 2.238793   8    2  0 17.3962443  2.5757464 19.97199  14.82049791
203 266.68966 2.238793   8    2  0 17.0775262  2.8731362 19.95066  14.20438997
204 276.44828 2.238793   8    2  0 16.7588080  3.1974392 19.95625  13.56136889
205 286.20690 2.238793   8    2  0 16.4400899  3.5412690 19.98136  12.89882094
206 295.96552 2.238793   8    2  0 16.1213718  3.8994638 20.02084  12.22190797
207 305.72414 2.238793   8    2  0 15.8026537  4.2684088 20.07106  11.53424488
208 315.48276 2.238793   8    2  0 15.4839356  4.6455433 20.12948  10.83839226
209 325.24138 2.238793   8    2  0 15.1652174  5.0290252 20.19424  10.13619222
210 335.00000 2.238793   8    2  0 14.8464993  5.4175068 20.26401   9.42899250
211  52.00000 3.217250   8    2  0 20.4659847  2.4047006 22.87069  18.06128413
212  61.75862 3.217250   8    2  0 20.2340574  2.2618161 22.49587  17.97224131
213  71.51724 3.217250   8    2  0 20.0021301  2.1218807 22.12401  17.88024939
214  81.27586 3.217250   8    2  0 19.7702028  1.9855180 21.75572  17.78468472
215  91.03448 3.217250   8    2  0 19.5382755  1.8535169 21.39179  17.68475860
216 100.79310 3.217250   8    2  0 19.3063482  1.7268776 21.03323  17.57947059
217 110.55172 3.217250   8    2  0 19.0744208  1.6068684 20.68129  17.46755246
218 120.31034 3.217250   8    2  0 18.8424935  1.4950868 20.33758  17.34740676
219 130.06897 3.217250   8    2  0 18.6105662  1.3935141 20.00408  17.21705215
220 139.82759 3.217250   8    2  0 18.3786389  1.3045371 19.68318  17.07410182
221 149.58621 3.217250   8    2  0 18.1467116  1.2308904 19.37760  16.91582122
222 159.34483 3.217250   8    2  0 17.9147843  1.1754590 19.09024  16.73932532
223 169.10345 3.217250   8    2  0 17.6828570  1.1409010 18.82376  16.54195603
224 178.86207 3.217250   8    2  0 17.4509297  1.1291345 18.58006  16.32179516
225 188.62069 3.217250   8    2  0 17.2190024  1.1408651 18.35987  16.07813732
226 198.37931 3.217250   8    2  0 16.9870751  1.1753893 18.16246  15.81168581
227 208.13793 3.217250   8    2  0 16.7551478  1.2307905 17.98594  15.52435724
228 217.89655 3.217250   8    2  0 16.5232205  1.3044115 17.82763  15.21880899
229 227.65517 3.217250   8    2  0 16.2912932  1.3933671 17.68466  14.89792609
230 237.41379 3.217250   8    2  0 16.0593659  1.4949224 17.55429  14.56444350
231 247.17241 3.217250   8    2  0 15.8274386  1.6066899 17.43413  14.22074865
232 256.93103 3.217250   8    2  0 15.5955113  1.7266878 17.32220  13.86882350
233 266.68966 3.217250   8    2  0 15.3635839  1.8533179 17.21690  13.51026603
234 276.44828 3.217250   8    2  0 15.1316566  1.9853117 17.11697  13.14634494
235 286.20690 3.217250   8    2  0 14.8997293  2.1216683 17.02140  12.77806104
236 295.96552 3.217250   8    2  0 14.6678020  2.2615987 16.92940  12.40620333
237 305.72414 3.217250   8    2  0 14.4358747  2.4044791 16.84035  12.03139566
238 315.48276 3.217250   8    2  0 14.2039474  2.5498135 16.75376  11.65413389
239 325.24138 3.217250   8    2  0 13.9720201  2.6972054 16.66923  11.27481471
240 335.00000 3.217250   8    2  0 13.7400928  2.8463351 16.58643  10.89375770
241  52.00000 4.195707   8    2  0 16.8426446  5.1991798 22.04182  11.64346475
242  61.75862 4.195707   8    2  0 16.6975081  4.8617733 21.55928  11.83573477
243  71.51724 4.195707   8    2  0 16.5523716  4.5252199 21.07759  12.02715168
244  81.27586 4.195707   8    2  0 16.4072351  4.1897252 20.59696  12.21750988
245  91.03448 4.195707   8    2  0 16.2620986  3.8555656 20.11766  12.40653299
246 100.79310 4.195707   8    2  0 16.1169621  3.5231210 19.64008  12.59384111
247 110.55172 4.195707   8    2  0 15.9718256  3.1929271 19.16475  12.77889849
248 120.31034 4.195707   8    2  0 15.8266891  2.8657621 18.69245  12.96092705
249 130.06897 4.195707   8    2  0 15.6815526  2.5427952 18.22435  13.13875740
250 139.82759 4.195707   8    2  0 15.5364161  2.2258548 17.76227  13.31056136
251 149.58621 4.195707   8    2  0 15.3912796  1.9179306 17.30921  13.47334899
252 159.34483 4.195707   8    2  0 15.2461431  1.6241592 16.87030  13.62198394
253 169.10345 4.195707   8    2  0 15.1010067  1.3537854 16.45479  13.74722125
254 178.86207 4.195707   8    2  0 14.9558702  1.1238253 16.07970  13.83204485
255 188.62069 4.195707   8    2  0 14.8107337  0.9636588 15.77439  13.84707483
256 198.37931 4.195707   8    2  0 14.6655972  0.9108787 15.57648  13.75471848
257 208.13793 4.195707   8    2  0 14.5204607  0.9829386 15.50340  13.53752209
258 217.89655 4.195707   8    2  0 14.3753242  1.1567382 15.53206  13.21858603
259 227.65517 4.195707   8    2  0 14.2301877  1.3947490 15.62494  12.83543872
260 237.41379 4.195707   8    2  0 14.0850512  1.6697344 15.75479  12.41531684
261 247.17241 4.195707   8    2  0 13.9399147  1.9662420 15.90616  11.97367271
262 256.93103 4.195707   8    2  0 13.7947782  2.2758754 16.07065  11.51890278
263 266.68966 4.195707   8    2  0 13.6496417  2.5939385 16.24358  11.05570321
264 276.44828 4.195707   8    2  0 13.5045052  2.9176757 16.42218  10.58682951
265 286.20690 4.195707   8    2  0 13.3593687  3.2453895 16.60476  10.11397926
266 295.96552 4.195707   8    2  0 13.2142322  3.5759867 16.79022   9.63824556
267 305.72414 4.195707   8    2  0 13.0690958  3.9087358 16.97783   9.16035999
268 315.48276 4.195707   8    2  0 12.9239593  4.2431305 17.16709   8.68082876
269 325.24138 4.195707   8    2  0 12.7788228  4.5788103 17.35763   8.20001242
270 335.00000 4.195707   8    2  0 12.6336863  4.9155120 17.54920   7.71817424
> fit2newdata(fit,predictors=c("hp"))
          hp    wt cyl carb am       mpg    se.fit     ymax       ymin
1   52.00000 3.325   6    2  0 22.364021 1.9497628 24.31378 20.4142585
2   61.75862 3.325   6    2  0 21.791612 1.6372083 23.42882 20.1544033
3   71.51724 3.325   6    2  0 21.219202 1.3416066 22.56081 19.8775953
4   81.27586 3.325   6    2  0 20.646792 1.0770081 21.72380 19.5697841
5   91.03448 3.325   6    2  0 20.074383 0.8721041 20.94649 19.2022784
6  100.79310 3.325   6    2  0 19.501973 0.7757357 20.27771 18.7262372
7  110.55172 3.325   6    2  0 18.929563 0.8267690 19.75633 18.1027941
8  120.31034 3.325   6    2  0 18.357153 1.0029502 19.36010 17.3542032
9  130.06897 3.325   6    2  0 17.784744 1.2525383 19.03728 16.5322054
10 139.82759 3.325   6    2  0 17.212334 1.5402521 18.75259 15.6720820
11 149.58621 3.325   6    2  0 16.639924 1.8483727 18.48830 14.7915517
12 159.34483 3.325   6    2  0 16.067515 2.1682176 18.23573 13.8992970
13 169.10345 3.325   6    2  0 15.495105 2.4952825 17.99039 12.9998225
14 178.86207 3.325   6    2  0 14.922695 2.8270626 17.74976 12.0956327
15 188.62069 3.325   6    2  0 14.350286 3.1620740 17.51236 11.1882116
16 198.37931 3.325   6    2  0 13.777876 3.4993888 17.27726 10.2784871
17 208.13793 3.325   6    2  0 13.205466 3.8383998 17.04387  9.3670664
18 217.89655 3.325   6    2  0 12.633056 4.1786942 16.81175  8.4543623
19 227.65517 3.325   6    2  0 12.060647 4.5199821 16.58063  7.5406647
20 237.41379 3.325   6    2  0 11.488237 4.8620543 16.35029  6.6261828
21 247.17241 3.325   6    2  0 10.915827 5.2047562 16.12058  5.7110712
22 256.93103 3.325   6    2  0 10.343418 5.5479711 15.89139  4.7954466
23 266.68966 3.325   6    2  0  9.771008 5.8916093 15.66262  3.8793987
24 276.44828 3.325   6    2  0  9.198598 6.2356009 15.43420  2.9629975
25 286.20690 3.325   6    2  0  8.626189 6.5798903 15.20608  2.0462983
26 295.96552 3.325   6    2  0  8.053779 6.9244333 14.97821  1.1293456
27 305.72414 3.325   6    2  0  7.481369 7.2691938 14.75056  0.2121755
28 315.48276 3.325   6    2  0  6.908960 7.6141421 14.52310 -0.7051826
29 325.24138 3.325   6    2  0  6.336550 7.9592539 14.29580 -1.6227041
30 335.00000 3.325   6    2  0  5.764140 8.3045088 14.06865 -2.5403687
> fit2newdata(fit,predictors=c("hp","wt"))
          hp       wt cyl carb am       mpg     se.fit     ymax        ymin
1   52.00000 2.238793   6    2  0 26.582958  3.8714127 30.45437  22.7115449
2   61.75862 2.238793   6    2  0 26.049145  3.6470967 29.69624  22.4020487
3   71.51724 2.238793   6    2  0 25.515333  3.4305346 28.94587  22.0847986
4   81.27586 2.238793   6    2  0 24.981521  3.2232896 28.20481  21.7582315
5   91.03448 2.238793   6    2  0 24.447709  3.0272758 27.47498  21.4204331
6  100.79310 2.238793   6    2  0 23.913897  2.8448156 26.75871  21.0690810
7  110.55172 2.238793   6    2  0 23.380084  2.6786803 26.05876  20.7014041
8  120.31034 2.238793   6    2  0 22.846272  2.5320852 25.37836  20.3141871
9  130.06897 2.238793   6    2  0 22.312460  2.4086007 24.72106  19.9038594
10 139.82759 2.238793   6    2  0 21.778648  2.3119330 24.09058  19.4667150
11 149.58621 2.238793   6    2  0 21.244836  2.2455479 23.49038  18.9992878
12 159.34483 2.238793   6    2  0 20.711024  2.2121735 22.92320  18.4988500
13 169.10345 2.238793   6    2  0 20.177211  2.2133036 22.39051  17.9639078
14 178.86207 2.238793   6    2  0 19.643399  2.2488861 21.89229  17.3945131
15 188.62069 2.238793   6    2  0 19.109587  2.3173345 21.42692  16.7922525
16 198.37931 2.238793   6    2  0 18.575775  2.4158569 20.99163  16.1599179
17 208.13793 2.238793   6    2  0 18.041963  2.5409574 20.58292  15.5010052
18 217.89655 2.238793   6    2  0 17.508150  2.6889291 20.19708  14.8192213
19 227.65517 2.238793   6    2  0 16.974338  2.8562194 19.83056  14.1181188
20 237.41379 2.238793   6    2  0 16.440526  3.0396404 19.48017  13.4008856
21 247.17241 2.238793   6    2  0 15.906714  3.2364507 19.14316  12.6702631
22 256.93103 2.238793   6    2  0 15.372902  3.4443559 18.81726  11.9285458
23 266.68966 2.238793   6    2  0 14.839089  3.6614664 18.50056  11.1776231
24 276.44828 2.238793   6    2  0 14.305277  3.8862398 18.19152  10.4190375
25 286.20690 2.238793   6    2  0 13.771465  4.1174213 17.88889   9.6540438
26 295.96552 2.238793   6    2  0 13.237653  4.3539903 17.59164   8.8836626
27 305.72414 2.238793   6    2  0 12.703841  4.5951148 17.29896   8.1087260
28 315.48276 2.238793   6    2  0 12.170029  4.8401139 17.01014   7.3299147
29 325.24138 2.238793   6    2  0 11.636216  5.0884281 16.72464   6.5477883
30 335.00000 2.238793   6    2  0 11.102404  5.3395948 16.44200   5.7628094
31  52.00000 3.217250   6    2  0 22.782533  1.9220338 24.70457  20.8604991
32  61.75862 3.217250   6    2  0 22.213952  1.6360253 23.84998  20.5779267
33  71.51724 3.217250   6    2  0 21.645371  1.3680602 23.01343  20.2773109
34  81.27586 3.217250   6    2  0 21.076790  1.1310365 22.20783  19.9457537
35  91.03448 3.217250   6    2  0 20.508209  0.9484426 21.45665  19.5597667
36 100.79310 3.217250   6    2  0 19.939628  0.8558553 20.79548  19.0837732
37 110.55172 3.217250   6    2  0 19.371048  0.8820873 20.25313  18.4889603
38 120.31034 3.217250   6    2  0 18.802467  1.0179945 19.82046  17.7844722
39 130.06897 3.217250   6    2  0 18.233886  1.2276776 19.46156  17.0062081
40 139.82759 3.217250   6    2  0 17.665305  1.4801071 19.14541  16.1851978
41 149.58621 3.217250   6    2  0 17.096724  1.7569538 18.85368  15.3397702
42 159.34483 3.217250   6    2  0 16.528143  2.0483411 18.57648  14.4798020
43 169.10345 3.217250   6    2  0 15.959562  2.3488637 18.30843  13.6106985
44 178.86207 3.217250   6    2  0 15.390981  2.6554219 18.04640  12.7355595
45 188.62069 3.217250   6    2  0 14.822400  2.9661448 17.78855  11.8562557
46 198.37931 3.217250   6    2  0 14.253820  3.2798490 17.53367  10.9739706
47 208.13793 3.217250   6    2  0 13.685239  3.5957542 17.28099  10.0894845
48 217.89655 3.217250   6    2  0 13.116658  3.9133276 17.02999   9.2033302
49 227.65517 3.217250   6    2  0 12.548077  4.2321936 16.78027   8.3158834
50 237.41379 3.217250   6    2  0 11.979496  4.5520805 16.53158   7.4274156
51 247.17241 3.217250   6    2  0 11.410915  4.8727873 16.28370   6.5381279
52 256.93103 3.217250   6    2  0 10.842334  5.1941621 16.03650   5.6481722
53 266.68966 3.217250   6    2  0 10.273753  5.5160882 15.78984   4.7576652
54 276.44828 3.217250   6    2  0  9.705173  5.8384744 15.54365   3.8666981
55 286.20690 3.217250   6    2  0  9.136592  6.1612485 15.29784   2.9753432
56 295.96552 3.217250   6    2  0  8.568011  6.4843524 15.05236   2.0836583
57 305.72414 3.217250   6    2  0  7.999430  6.8077394 14.80717   1.1916904
58 315.48276 3.217250   6    2  0  7.430849  7.1313708 14.56222   0.2994781
59 325.24138 3.217250   6    2  0  6.862268  7.4552149 14.31748  -0.5929468
60 335.00000 3.217250   6    2  0  6.293687  7.7792450 14.07293  -1.4855578
61  52.00000 4.195707   6    2  0 18.982108  3.8083651 22.79047  15.1737430
62  61.75862 4.195707   6    2  0 18.378759  3.3551081 21.73387  15.0236504
63  71.51724 4.195707   6    2  0 17.775409  2.9380853 20.71349  14.8373237
64  81.27586 4.195707   6    2  0 17.172059  2.5749617 19.74702  14.5970977
65  91.03448 4.195707   6    2  0 16.568710  2.2915058 18.86022  14.2772040
66 100.79310 4.195707   6    2  0 15.965360  2.1199193 18.08528  13.8454409
67 110.55172 4.195707   6    2  0 15.362011  2.0879669 17.44998  13.2740438
68 120.31034 4.195707   6    2  0 14.758661  2.2017361 16.96040  12.5569250
69 130.06897 4.195707   6    2  0 14.155311  2.4409355 16.59625  11.7143760
70 139.82759 4.195707   6    2  0 13.551962  2.7732974 16.32526  10.7786644
71 149.58621 4.195707   6    2  0 12.948612  3.1696498 16.11826   9.7789625
72 159.34483 4.195707   6    2  0 12.345263  3.6089706 15.95423   8.7362921
73 169.10345 4.195707   6    2  0 11.741913  4.0773946 15.81931   7.6645185
74 178.86207 4.195707   6    2  0 11.138564  4.5659734 15.70454   6.5725902
75 188.62069 4.195707   6    2  0 10.535214  5.0688822 15.60410   5.4663317
76 198.37931 4.195707   6    2  0  9.931864  5.5822495 15.51411   4.3496148
77 208.13793 4.195707   6    2  0  9.328515  6.1034368 15.43195   3.2250780
78 217.89655 4.195707   6    2  0  8.725165  6.6306003 15.35577   2.0945649
79 227.65517 4.195707   6    2  0  8.121816  7.1624205 15.28424   0.9593951
80 237.41379 4.195707   6    2  0  7.518466  7.6979325 15.21640  -0.1794664
81 247.17241 4.195707   6    2  0  6.915116  8.2364160 15.15153  -1.3212995
82 256.93103 4.195707   6    2  0  6.311767  8.7773243 15.08909  -2.4655574
83 266.68966 4.195707   6    2  0  5.708417  9.3202351 15.02865  -3.6118178
84 276.44828 4.195707   6    2  0  5.105068  9.8648179 14.96989  -4.7597502
85 286.20690 4.195707   6    2  0  4.501718 10.4108102 14.91253  -5.9090921
86 295.96552 4.195707   6    2  0  3.898369 10.9580014 14.85637  -7.0596329
87 305.72414 4.195707   6    2  0  3.295019 11.5062205 14.80124  -8.2112015
88 315.48276 4.195707   6    2  0  2.691669 12.0553272 14.74700  -9.3636578
89 325.24138 4.195707   6    2  0  2.088320 12.6052054 14.69353 -10.5168856
90 335.00000 4.195707   6    2  0  1.484970 13.1557586 14.64073 -11.6707884
> fit=loess(mpg~hp*wt*am,data=mtcars)
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  neighborhood radius 5.2631
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  reciprocal condition number  4.8131e-17
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  There are other near singularities as well. 40.381
> fit2newdata(fit,predictors=c("hp"))
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 5.2631
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  4.8131e-17
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  There are other near singularities as well. 40.381
          hp    wt am       mpg     se.fit     ymax       ymin
1   52.00000 3.325  0 21.637119  5.1276490 26.76477  16.509470
2   61.75862 3.325  0 21.341906  3.9016732 25.24358  17.440233
3   71.51724 3.325  0 21.122860  2.8223580 23.94522  18.300502
4   81.27586 3.325  0 20.924792  1.9295362 22.85433  18.995256
5   91.03448 3.325  0 20.692515  1.2941101 21.98662  19.398405
6  100.79310 3.325  0 20.370839  1.0000963 21.37094  19.370742
7  110.55172 3.325  0 19.904576  0.9792414 20.88382  18.925335
8  120.31034 3.325  0 19.238538  1.0128878 20.25143  18.225651
9  130.06897 3.325  0 18.507123  1.0550672 19.56219  17.452056
10 139.82759 3.325  0 18.007290  1.1516881 19.15898  16.855602
11 149.58621 3.325  0 17.405626  1.2452280 18.65085  16.160398
12 159.34483 3.325  0 16.864143  1.3309174 18.19506  15.533226
13 169.10345 3.325  0 16.567037  1.4130098 17.98005  15.154027
14 178.86207 3.325  0 16.140863  1.5880127 17.72888  14.552851
15 188.62069 3.325  0 15.782294  1.8526250 17.63492  13.929669
16 198.37931 3.325  0 15.576480  2.1893585 17.76584  13.387121
17 208.13793 3.325  0 15.465710  2.6295548 18.09526  12.836155
18 217.89655 3.325  0 15.392275  3.1922582 18.58453  12.200017
19 227.65517 3.325  0 15.298465  3.8846428 19.18311  11.413822
20 237.41379 3.325  0 15.126569  4.7133557 19.83992  10.413213
21 247.17241 3.325  0 14.815786  5.6890809 20.50487   9.126705
22 256.93103 3.325  0 14.248351  6.7012625 20.94961   7.547088
23 266.68966 3.325  0 13.415262  7.7318214 21.14708   5.683441
24 276.44828 3.325  0 12.354904  8.8320989 21.18700   3.522805
25 286.20690 3.325  0 11.105660 10.0472417 21.15290   1.058419
26 295.96552 3.325  0  9.705917 11.4109638 21.11688  -1.705047
27 305.72414 3.325  0  8.194057 12.9453328 21.13939  -4.751276
28 315.48276 3.325  0  6.608465 14.6634694 21.27193  -8.055004
29 325.24138 3.325  0  4.987526 16.5734050 21.56093 -11.585879
30 335.00000 3.325  0  3.369625 18.6818640 22.05149 -15.312239
> 
> 
> 
> cleanEx()
> nameEx("getMeans")
> ### * getMeans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getMeans
> ### Title: calculate mean values of two consecutive number
> ### Aliases: getMeans
> 
> ### ** Examples
> 
> x=c(50,60,70)
> getMeans(x)
[1] 55 65
> 
> 
> 
> cleanEx()
> nameEx("getNewFormula")
> ### * getNewFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getNewFormula
> ### Title: Make new formula
> ### Aliases: getNewFormula
> 
> ### ** Examples
> 
> fit=lm(mpg~factor(cyl)*factor(am)+wt+carb,data=mtcars)
> getNewFormula(fit,predictors=c("cyl","wt"))
[1] "mpg~factor(am)+carb"
> fit=lm(Sepal.Length~Sepal.Width*Petal.Length+Species,data=iris)
> getNewFormula(fit,predictors=c("Petal.Length"))
[1] "Sepal.Length~Sepal.Width+Species"
> fit=lm(mpg~hp*wt*factor(cyl),data=mtcars)
> getNewFormula(fit,predictors=c("hp","cyl"))
[1] "mpg~wt"
> fit=loess(mpg~hp*wt,data=mtcars)
> getNewFormula(fit,predictors=c("hp","wt"))
[1] "mpg~"
> 
> 
> 
> cleanEx()
> nameEx("ggPredict")
> ### * ggPredict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggPredict
> ### Title: Visualize predictions from the multiple regression models.
> ### Aliases: ggPredict
> 
> ### ** Examples
> 
> fit=loess(mpg~hp*wt*am,data=mtcars)
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  neighborhood radius 5.2631
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  reciprocal condition number  4.8131e-17
Warning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,  :
  There are other near singularities as well. 40.381
> ggPredict(fit)
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 5.2631
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  4.8131e-17
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  There are other near singularities as well. 40.381
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 5.2631
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  4.8131e-17
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  There are other near singularities as well. 40.381
> ggPredict(fit,hp)
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 5.2631
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  4.8131e-17
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  There are other near singularities as well. 40.381
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  pseudoinverse used at 1.1217 2.8465 -0.010111
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  neighborhood radius 5.2631
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  reciprocal condition number  4.8131e-17
Warning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x else if (is.data.frame(newdata)) as.matrix(model.frame(delete.response(terms(object)),  :
  There are other near singularities as well. 40.381
> 
> 
> 
> cleanEx()
> nameEx("number2group")
> ### * number2group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: number2group
> ### Title: Convert a numeric vector into groups
> ### Aliases: number2group
> 
> ### ** Examples
> 
> number2group(iris$Sepal.Length,label="Sepal.Length")
breaks= 5.015267 5.843333 6.671399 
result
 1  2  3 
52 47 51 
> x=number2group(mtcars$wt,label="wt")
breaks= 2.238793 3.21725 4.195707 
result
 1  2  3 
 9 15  8 
> x
 [1] wt = 2.24 wt = 3.22 wt = 2.24 wt = 3.22 wt = 3.22 wt = 3.22 wt = 3.22
 [8] wt = 3.22 wt = 3.22 wt = 3.22 wt = 3.22 wt = 4.2  wt = 4.2  wt = 4.2 
[15] wt = 4.2  wt = 4.2  wt = 4.2  wt = 2.24 wt = 2.24 wt = 2.24 wt = 2.24
[22] wt = 3.22 wt = 3.22 wt = 4.2  wt = 4.2  wt = 2.24 wt = 2.24 wt = 2.24
[29] wt = 3.22 wt = 3.22 wt = 3.22 wt = 3.22
attr(,"breaks")
[1] 2.238793 3.217250 4.195707
Levels: wt = 2.24 wt = 3.22 wt = 4.2
> 
> 
> 
> cleanEx()
> nameEx("predict3d")
> ### * predict3d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict3d
> ### Title: Draw 3d predict plot using package 'rgl'
> ### Aliases: predict3d
> 
> ### ** Examples
> 
> fit=lm(mpg~hp*wt,data=mtcars)
> predict3d(fit,show.error=TRUE)
> fit=lm(log(mpg)~hp*wt,data=mtcars)
> predict3d(fit,dep=mpg)
> 
> 
> 
> cleanEx()
> nameEx("rank2colors")
> ### * rank2colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rank2colors
> ### Title: Rank a numeric vector using proportional table and returns
> ###   character vector of names of color using palette
> ### Aliases: rank2colors
> 
> ### ** Examples
> 
> rank2colors(mtcars$wt,palette="Blues")
 [1] "#2171B5" "#4292C6" "#08519C" "#6BAED6" "#9ECAE1" "#9ECAE1" "#C6DBEF"
 [8] "#6BAED6" "#4292C6" "#9ECAE1" "#9ECAE1" "#F7FBFF" "#C6DBEF" "#DEEBF7"
[15] "#F7FBFF" "#F7FBFF" "#F7FBFF" "#08519C" "#08306B" "#08306B" "#2171B5"
[22] "#C6DBEF" "#6BAED6" "#DEEBF7" "#DEEBF7" "#08306B" "#08519C" "#08306B"
[29] "#4292C6" "#2171B5" "#C6DBEF" "#2171B5"
> 
> 
> 
> cleanEx()
> nameEx("restoreData")
> ### * restoreData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restoreData
> ### Title: Restore factors in data.frame as numeric
> ### Aliases: restoreData
> 
> ### ** Examples
> 
> fit=lm(mpg~factor(cyl)*factor(am),data=mtcars)
> fit=lm(mpg~wt*factor(am),data=mtcars)
> fit=lm(mpg~wt*hp,data=mtcars)
> restoreData(fit$model)
                     mpg    wt  hp
Mazda RX4           21.0 2.620 110
Mazda RX4 Wag       21.0 2.875 110
Datsun 710          22.8 2.320  93
Hornet 4 Drive      21.4 3.215 110
Hornet Sportabout   18.7 3.440 175
Valiant             18.1 3.460 105
Duster 360          14.3 3.570 245
Merc 240D           24.4 3.190  62
Merc 230            22.8 3.150  95
Merc 280            19.2 3.440 123
Merc 280C           17.8 3.440 123
Merc 450SE          16.4 4.070 180
Merc 450SL          17.3 3.730 180
Merc 450SLC         15.2 3.780 180
Cadillac Fleetwood  10.4 5.250 205
Lincoln Continental 10.4 5.424 215
Chrysler Imperial   14.7 5.345 230
Fiat 128            32.4 2.200  66
Honda Civic         30.4 1.615  52
Toyota Corolla      33.9 1.835  65
Toyota Corona       21.5 2.465  97
Dodge Challenger    15.5 3.520 150
AMC Javelin         15.2 3.435 150
Camaro Z28          13.3 3.840 245
Pontiac Firebird    19.2 3.845 175
Fiat X1-9           27.3 1.935  66
Porsche 914-2       26.0 2.140  91
Lotus Europa        30.4 1.513 113
Ford Pantera L      15.8 3.170 264
Ferrari Dino        19.7 2.770 175
Maserati Bora       15.0 3.570 335
Volvo 142E          21.4 2.780 109
> 
> 
> 
> cleanEx()
> nameEx("restoreData2")
> ### * restoreData2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restoreData2
> ### Title: restore data column with I() function
> ### Aliases: restoreData2
> 
> ### ** Examples
> 
> fit=lm(mpg~I(cyl^(1/2))*am,data=mtcars)
> restoreData2(fit$model)
                     mpg I(cyl^(1/2)) am cyl
Mazda RX4           21.0 2.449489....  1   6
Mazda RX4 Wag       21.0 2.449489....  1   6
Datsun 710          22.8            2  1   4
Hornet 4 Drive      21.4 2.449489....  0   6
Hornet Sportabout   18.7 2.828427....  0   8
Valiant             18.1 2.449489....  0   6
Duster 360          14.3 2.828427....  0   8
Merc 240D           24.4            2  0   4
Merc 230            22.8            2  0   4
Merc 280            19.2 2.449489....  0   6
Merc 280C           17.8 2.449489....  0   6
Merc 450SE          16.4 2.828427....  0   8
Merc 450SL          17.3 2.828427....  0   8
Merc 450SLC         15.2 2.828427....  0   8
Cadillac Fleetwood  10.4 2.828427....  0   8
Lincoln Continental 10.4 2.828427....  0   8
Chrysler Imperial   14.7 2.828427....  0   8
Fiat 128            32.4            2  1   4
Honda Civic         30.4            2  1   4
Toyota Corolla      33.9            2  1   4
Toyota Corona       21.5            2  0   4
Dodge Challenger    15.5 2.828427....  0   8
AMC Javelin         15.2 2.828427....  0   8
Camaro Z28          13.3 2.828427....  0   8
Pontiac Firebird    19.2 2.828427....  0   8
Fiat X1-9           27.3            2  1   4
Porsche 914-2       26.0            2  1   4
Lotus Europa        30.4            2  1   4
Ford Pantera L      15.8 2.828427....  1   8
Ferrari Dino        19.7 2.449489....  1   6
Maserati Bora       15.0 2.828427....  1   8
Volvo 142E          21.4            2  1   4
> fit=lm(mpg~sqrt(hp)*log(wt)*am,data=mtcars)
> restoreData2(fit$model)
                     mpg  sqrt(hp)   log(wt) am    wt  hp
Mazda RX4           21.0 10.488088 0.9631743  1 2.620 110
Mazda RX4 Wag       21.0 10.488088 1.0560527  1 2.875 110
Datsun 710          22.8  9.643651 0.8415672  1 2.320  93
Hornet 4 Drive      21.4 10.488088 1.1678274  0 3.215 110
Hornet Sportabout   18.7 13.228757 1.2354715  0 3.440 175
Valiant             18.1 10.246951 1.2412686  0 3.460 105
Duster 360          14.3 15.652476 1.2725656  0 3.570 245
Merc 240D           24.4  7.874008 1.1600209  0 3.190  62
Merc 230            22.8  9.746794 1.1474025  0 3.150  95
Merc 280            19.2 11.090537 1.2354715  0 3.440 123
Merc 280C           17.8 11.090537 1.2354715  0 3.440 123
Merc 450SE          16.4 13.416408 1.4036430  0 4.070 180
Merc 450SL          17.3 13.416408 1.3164082  0 3.730 180
Merc 450SLC         15.2 13.416408 1.3297240  0 3.780 180
Cadillac Fleetwood  10.4 14.317821 1.6582281  0 5.250 205
Lincoln Continental 10.4 14.662878 1.6908336  0 5.424 215
Chrysler Imperial   14.7 15.165751 1.6761615  0 5.345 230
Fiat 128            32.4  8.124038 0.7884574  1 2.200  66
Honda Civic         30.4  7.211103 0.4793350  1 1.615  52
Toyota Corolla      33.9  8.062258 0.6070445  1 1.835  65
Toyota Corona       21.5  9.848858 0.9021918  0 2.465  97
Dodge Challenger    15.5 12.247449 1.2584610  0 3.520 150
AMC Javelin         15.2 12.247449 1.2340169  0 3.435 150
Camaro Z28          13.3 15.652476 1.3454724  0 3.840 245
Pontiac Firebird    19.2 13.228757 1.3467736  0 3.845 175
Fiat X1-9           27.3  8.124038 0.6601073  1 1.935  66
Porsche 914-2       26.0  9.539392 0.7608058  1 2.140  91
Lotus Europa        30.4 10.630146 0.4140944  1 1.513 113
Ford Pantera L      15.8 16.248077 1.1537316  1 3.170 264
Ferrari Dino        19.7 13.228757 1.0188473  1 2.770 175
Maserati Bora       15.0 18.303005 1.2725656  1 3.570 335
Volvo 142E          21.4 10.440307 1.0224509  1 2.780 109
> 
> 
> 
> cleanEx()
> nameEx("restoreData3")
> ### * restoreData3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restoreData3
> ### Title: Restore data from arithmetic operator
> ### Aliases: restoreData3
> 
> ### ** Examples
> 
> fit=lm(2^mpg~hp*wt,data=mtcars)
> summary(fit)

Call:
lm(formula = 2^mpg ~ hp * wt, data = mtcars)

Residuals:
       Min         1Q     Median         3Q        Max 
-3.714e+09 -8.805e+08 -5.969e+06  3.940e+08  1.199e+10 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)   
(Intercept)  1.368e+10  4.464e+09   3.064  0.00479 **
hp          -7.106e+07  3.058e+07  -2.324  0.02762 * 
wt          -4.079e+09  1.572e+09  -2.595  0.01489 * 
hp:wt        2.068e+07  9.186e+06   2.252  0.03238 * 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 2.665e+09 on 28 degrees of freedom
Multiple R-squared:  0.2737,	Adjusted R-squared:  0.1958 
F-statistic: 3.517 on 3 and 28 DF,  p-value: 0.02791

> restoreData3(fit$model)
                           2^mpg  hp    wt  mpg
Mazda RX4           2.097152e+06 110 2.620 21.0
Mazda RX4 Wag       2.097152e+06 110 2.875 21.0
Datsun 710          7.302707e+06  93 2.320 22.8
Hornet 4 Drive      2.767209e+06 110 3.215 21.4
Hornet Sportabout   4.258542e+05 175 3.440 18.7
Valiant             2.809590e+05 105 3.460 18.1
Duster 360          2.017107e+04 245 3.570 14.3
Merc 240D           2.213767e+07  62 3.190 24.4
Merc 230            7.302707e+06  95 3.150 22.8
Merc 280            6.022488e+05 123 3.440 19.2
Merc 280C           2.282096e+05 123 3.440 17.8
Merc 450SE          8.647527e+04 180 4.070 16.4
Merc 450SL          1.613686e+05 180 3.730 17.3
Merc 450SLC         3.764055e+04 180 3.780 15.2
Cadillac Fleetwood  1.351176e+03 205 5.250 10.4
Lincoln Continental 1.351176e+03 215 5.424 10.4
Chrysler Imperial   2.661589e+04 230 5.345 14.7
Fiat 128            5.667243e+09  66 2.200 32.4
Honda Civic         1.416811e+09  52 1.615 30.4
Toyota Corolla      1.602938e+10  65 1.835 33.9
Toyota Corona       2.965821e+06  97 2.465 21.5
Dodge Challenger    4.634095e+04 150 3.520 15.5
AMC Javelin         3.764055e+04 150 3.435 15.2
Camaro Z28          1.008554e+04 245 3.840 13.3
Pontiac Firebird    6.022488e+05 175 3.845 19.2
Fiat X1-9           1.652414e+08  66 1.935 27.3
Porsche 914-2       6.710886e+07  91 2.140 26.0
Lotus Europa        1.416811e+09 113 1.513 30.4
Ford Pantera L      5.705240e+04 264 3.170 15.8
Ferrari Dino        8.517084e+05 175 2.770 19.7
Maserati Bora       3.276800e+04 335 3.570 15.0
Volvo 142E          2.767209e+06 109 2.780 21.4
> 
> 
> 
> cleanEx()
> nameEx("restoreNames")
> ### * restoreNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restoreNames
> ### Title: Restore factors in variable name as numeric
> ### Aliases: restoreNames
> 
> ### ** Examples
> 
> restoreNames(c("factor(cyl)","am"))
[1] "cyl" "am" 
> restoreNames(c("I(age^2)","am","100/mpg","cyl^1/2","mpg2","sex + 0.5"))
[1] "age"  "am"   "mpg"  "cyl"  "mpg2" "sex" 
> 
> 
> 
> cleanEx()
> nameEx("string2pattern")
> ### * string2pattern
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string2pattern
> ### Title: change string to pattern
> ### Aliases: string2pattern
> 
> ### ** Examples
> 
> string=c("I(age^2)","factor(cyl)","log(mpg)")
> string2pattern(string)
[1] "I\\(age\\^2\\)"  "factor\\(cyl\\)" "log\\(mpg\\)"   
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.498 0.136 3.024 0.004 0.005 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
